server:
  port: ${SERVER_PORT:5002}

spring:
  application:
    name: task-service
  config:
    import: configserver:${CLOUD_CONFIG_URL:http://localhost:5555}
  cloud:
    config:
      retry:
        max-attempts: 10
        initial-interval: 1000
        multiplier: 1.5
        max-interval: 10000
      fail-fast: true

  datasource:
    url: jdbc:postgresql://${APP_POSTGRESQL_HOST:127.0.0.1}:${APP_POSTGRESQL_PORT:5432}/${APP_POSTGRESQL_NAME:tasks_db}
    username: ${APP_POSTGRESQL_USER:postgres}
    password: ${APP_POSTGRESQL_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect

  kafka:
    bootstrap-servers:
      - ${KAFKA_URL:localhost:9092}
    consumer:
      group-id: analytics-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: ru.itmo.apiobjects.kafka.model
#        spring.json.value.default.type: ru.itmo.apiobjects.kafka.model.TaskRequest
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

logging:
  config: classpath:${logback:logback-spring.xml}

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER:http://localhost:5761/eureka/}

